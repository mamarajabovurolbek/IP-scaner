import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/services.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key? key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'IP ma\'lumoti va ochiq portlarni tekshirish',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(
        title: 'IP ma\'lumoti va ochiq portlarni tekshirish',
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title});

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late TextEditingController _ipController;
  late TextEditingController _portController;
  String _ipInfo = '';
  bool _isPortOpen = false;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _ipController = TextEditingController();
    _portController = TextEditingController();
  }

  @override
  void dispose() {
    _ipController.dispose();
    _portController.dispose();
    super.dispose();
  }

  Future<void> _getIpInfo(String ip) async {
    setState(() {
      _isLoading = true;
      _ipInfo = '';
    });

    final url = Uri.parse(
        "https://rest.db.ripe.net/search.json?query-string=$ip&type-filter=inetnum");
    try {
      final response = await http.get(url);
      final data = json.decode(response.body);
      _setIpInfo(data);
    } catch (error) {
      setState(() {
        _ipInfo = "Ma'lumot topilmadi";
      });
    }
    setState(() {
      _isLoading = false;
    });
  }

  void _setIpInfo(data) {
    if (data.containsKey("objects") && data["objects"].containsKey("object")) {
      final ipInfo = data["objects"]["object"][0];
      final inetnum = ipInfo["primary-key"]["attribute"][0]["value"];
      final netname = ipInfo["attributes"]["attribute"][1]["value"];
      String country = '';
      String created = '';
      String lastModified = '';
      String address = '';
      String phone = '';

      for (var attr in ipInfo["attributes"]["attribute"]) {
        if (attr["name"] == "country") {
          country = attr["value"];
        } else if (attr["name"] == "created") {
          created = attr["value"];
        } else if (attr["name"] == "last-modified") {
          lastModified = attr["value"];
        } else if (attr["name"] == "address") {
          address = attr["value"];
        } else if (attr["name"] == "phone") {
          phone = attr["value"];
        }
      }

      setState(() {
        _ipInfo =
            "Inetnum: $inetnum\nNetname: $netname\nCountry: $country\nCreated: $created\nLast-modified: $lastModified\nAddress: $address\nPhone: $phone";
      });
    }
  }

  Future<void> _checkPort(String ip, int port) async {
    setState(() {
      _isLoading = true;
      _isPortOpen = false;
    });

    try {
      final result =
          await Socket.connect(ip, port, timeout: const Duration(seconds: 1));
      result.destroy();
      setState(() {
        _isPortOpen = true;
      });
    } catch (error) {
      print("Xatolik: $error");
      setState(() {
        _isPortOpen = false;
      });
    }
    setState(() {
      _isLoading = false;
    });
  }

  void _showPortDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Portlarni tekshirish"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              TextField(
                controller: _portController,
                decoration:
                    InputDecoration(labelText: 'Port raqamini kiriting'),
                keyboardType: TextInputType.number,
              ),
            ],
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text('Bekor qilish'),
            ),
            ElevatedButton(
              onPressed: () {
                int port = int.tryParse(_portController.text) ?? 0;
                if (port > 0 && port <= 65535) {
                  _checkPort(_ipController.text, port);
                }
                Navigator.pop(context);
              },
              child: Text('Tekshirish'),
            ),
          ],
        );
      },
    );
  }

  void _copyIpInfoToClipboard() {
    Clipboard.setData(ClipboardData(text: _ipInfo));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Ma\'lumotlar nusxalandi'),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            TextField(
              controller: _ipController,
              decoration: InputDecoration(labelText: 'IP adresni kiritish'),
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () => _getIpInfo(_ipController.text),
              style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.all(Colors.green)),
              child: Text('IP ma\'lumoti', style: TextStyle(fontSize: 18.0)),
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: _showPortDialog,
              style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.all(Colors.green)),
              child:
                  Text('Portni tekshirish', style: TextStyle(fontSize: 18.0)),
            ),
            SizedBox(height: 16.0),
            _isLoading
                ? Center(child: CircularProgressIndicator())
                : Text(
                    _ipInfo,
                    style: TextStyle(fontSize: 18.0),
                  ),
            SizedBox(height: 16.0),
            _isLoading
                ? SizedBox.shrink()
                : Text(
                    _isPortOpen ? 'Port ochiq' : 'Port yopiq',
                    style: TextStyle(fontSize: 18.0),
                  ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () {
                _copyIpInfoToClipboard();
              },
              style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.all(Colors.green)),
              child: Text('Copy', style: TextStyle(fontSize: 18.0)),
            ),
          ],
        ),
      ),
    );
  }
}
